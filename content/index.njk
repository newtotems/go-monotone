---
layout: layouts/home.njk
---
<div class="wrapper">
	<div class="btl"></div>
  <div class="card-group">
	<div class="bottle"></div>
  </div>
  <div class="buttons">
    <button id="previous">previous</button>
    <button id="next">next</button>
  </div>
</div>

<script>
  // Declare 'bottles' JSON object variable
  const bottles = {
    "entries": [
      {
        "background": "url('https://images.pexels.com/photos/255379/pexels-photo-255379.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1')",
        "bottle": "teal",
        "link": "https://example.com/product1"
      },
      {
        "background": "url('https://images.pexels.com/photos/19670/pexels-photo.jpg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1')",
        "bottle": "blue",
        "link": "https://example.com/product2"
      },
      {
        "background": "url('https://images.pexels.com/photos/963278/pexels-photo-963278.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=1')",
        "bottle": "pink",
        "link": "https://example.com/product3"
      }
    ]
  };

  // Get DOM elements
  const cardGroup = document.querySelector('.card-group');
  const previousButton = document.getElementById('previous');
  const nextButton = document.getElementById('next');

  // Initialize index to track current entry
  let currentIndex = 0;

  // Set initial background and bottle values
  cardGroup.style.backgroundImage = bottles.entries[currentIndex].background;
  cardGroup.style.backgroundColor = bottles.entries[currentIndex].bottle;

  // Function to handle entry change
  const changeEntry = () => {
    // Create a new card element for the next entry
    const nextCard = document.createElement('div');
    nextCard.classList.add('card-group');
    nextCard.style.backgroundImage = bottles.entries[currentIndex].background;
    nextCard.style.backgroundColor = bottles.entries[currentIndex].bottle;

    // Append the new card element after the current card element
    cardGroup.parentNode.insertBefore(nextCard, cardGroup.nextSibling);

    // Fade out the current card
    cardGroup.style.opacity = 0;

    // Remove the current card after the fade-out animation completes
    setTimeout(() => {
      cardGroup.remove();
    }, 500); // Modify the delay (in milliseconds) based on the duration of your fade-out animation

    // Update the reference to the new card element
    cardGroup = nextCard;
  };

  // Event listener for 'previous' button click
  previousButton.addEventListener('click', () => {
    currentIndex = (currentIndex === 0) ? bottles.entries.length - 1 : currentIndex - 1;
    changeEntry();
  });

  // Event listener for 'next' button click
  nextButton.addEventListener('click', () => {
    currentIndex = (currentIndex === bottles.entries.length - 1) ? 0 : currentIndex + 1;
    changeEntry();
  });
</script>

<style>
  .card-group {
    opacity: 1;
    transition: opacity 0.5s ease;
  }
</style>
